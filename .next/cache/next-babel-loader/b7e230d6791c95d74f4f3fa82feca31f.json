{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\raul-\\\\MIT\\\\contest_checker\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport 'react';\nvar name = \"Raul Alcantara\";\nvar answers = [\"A\", \"B\", \"\", \"B\", \"A\"];\nvar correct_answer = [\"A\", \"C\", \"D\", \"B\", \"D\"];\nvar correct_answer_score = 10;\nvar incorrect_answer_score = -2;\nvar blank_answer_score = 0;\n\nvar Index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n    _this.get_scores = _this.get_scores.bind(_assertThisInitialized(_this));\n    _this.get_question_score = _this.get_question_score.bind(_assertThisInitialized(_this));\n    _this.get_total_score = _this.get_total_score.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"get_scores\",\n    value: function get_scores(answers) {\n      var result = [];\n\n      for (var i = 0; i < answers.length; i++) {\n        result.push(__jsx(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }, \"Answer for problem \", i + 1, \" was \", answers[i]));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"get_question_score\",\n    value: function get_question_score(answer, correct_answer) {\n      if (answer == correct_answer) {\n        return correct_answer_score;\n      } else if (answer == \"\") {\n        return blank_answer_score;\n      } else {\n        return incorrect_answer_score;\n      }\n    }\n  }, {\n    key: \"get_total_score\",\n    value: function get_total_score(answers) {\n      var score = 0;\n\n      for (var i = 0; i < answers.length; i++) {\n        var add_score = get_question_score(answers[i], correct_answer[i]);\n        score += add_score;\n      }\n\n      return score;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, __jsx(\"ol\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, __jsx(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Name is \", name), get_scores(answers)), __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \" The score is \", get_total_score(answers)));\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport { Index as default };","map":{"version":3,"sources":["C:/Users/raul-/MIT/contest_checker/pages/index.js"],"names":["name","answers","correct_answer","correct_answer_score","incorrect_answer_score","blank_answer_score","Index","props","get_scores","bind","get_question_score","get_total_score","result","i","length","push","answer","score","add_score","React","Component"],"mappings":";;;;;;;;;AAAA,OAAO,OAAP;AACA,IAAIA,IAAI,GAAG,gBAAX;AACA,IAAIC,OAAO,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,EAAX,EAAe,GAAf,EAAoB,GAApB,CAAd;AACA,IAAIC,cAAc,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,CAArB;AACA,IAAIC,oBAAoB,GAAG,EAA3B;AACA,IAAIC,sBAAsB,GAAG,CAAC,CAA9B;AACA,IAAIC,kBAAkB,GAAG,CAAzB;;IAEqBC,K;;;;;AACjB,iBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,+EAAMA,KAAN;AACA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,+BAAlB;AACA,UAAKC,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBD,IAAxB,+BAA1B;AACA,UAAKE,eAAL,GAAuB,MAAKA,eAAL,CAAqBF,IAArB,+BAAvB;AAJc;AAKjB;;;;+BACUR,O,EAAQ;AACf,UAAIW,MAAM,GAAG,EAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAEZ,OAAO,CAACa,MAA3B,EAAmCD,CAAC,EAApC,EAAuC;AACnCD,QAAAA,MAAM,CAACG,IAAP,CAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAwBF,CAAC,GAAC,CAA1B,WAAkCZ,OAAO,CAACY,CAAD,CAAzC,CAAZ;AACH;;AACD,aAAOD,MAAP;AACH;;;uCACkBI,M,EAAQd,c,EAAe;AACtC,UAAIc,MAAM,IAAId,cAAd,EAA6B;AAEzB,eAAOC,oBAAP;AAEH,OAJD,MAIQ,IAAIa,MAAM,IAAI,EAAd,EAAiB;AAErB,eAAOX,kBAAP;AAEH,OAJO,MAID;AAEH,eAAOD,sBAAP;AACH;AACJ;;;oCACeH,O,EAAQ;AACpB,UAAIgB,KAAK,GAAG,CAAZ;;AACA,WAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,OAAO,CAACa,MAA5B,EAAoCD,CAAC,EAArC,EAAwC;AACpC,YAAIK,SAAS,GAAGR,kBAAkB,CAACT,OAAO,CAACY,CAAD,CAAR,EAAaX,cAAc,CAACW,CAAD,CAA3B,CAAlC;AACAI,QAAAA,KAAK,IAAIC,SAAT;AACH;;AACD,aAAOD,KAAP;AACH;;;6BACO;AACJ,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAajB,IAAb,CADJ,EAEKQ,UAAU,CAACP,OAAD,CAFf,CADJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAkBU,eAAe,CAACV,OAAD,CAAjC,CALJ,CADJ;AAUH;;;;EA/C8BkB,KAAK,CAACC,S;;SAApBd,K","sourcesContent":["import 'react'\r\nlet name = \"Raul Alcantara\";\r\nlet answers = [\"A\", \"B\", \"\", \"B\", \"A\"];\r\nlet correct_answer = [\"A\", \"C\", \"D\", \"B\", \"D\"];\r\nlet correct_answer_score = 10;\r\nlet incorrect_answer_score = -2;\r\nlet blank_answer_score = 0;\r\n\r\nexport default class Index extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.get_scores = this.get_scores.bind(this);\r\n        this.get_question_score = this.get_question_score.bind(this);\r\n        this.get_total_score = this.get_total_score.bind(this);\r\n    }\r\n    get_scores(answers){\r\n        let result = []\r\n        for (let i = 0; i< answers.length; i++){\r\n            result.push(<li>Answer for problem {i+1} was {answers[i]}</li>);\r\n        }\r\n        return result;\r\n    }\r\n    get_question_score(answer, correct_answer){\r\n        if (answer == correct_answer){\r\n\r\n            return correct_answer_score;\r\n\r\n        } else  if (answer == \"\"){\r\n\r\n            return blank_answer_score;\r\n\r\n        } else {\r\n\r\n            return incorrect_answer_score;\r\n        }\r\n    }\r\n    get_total_score(answers){\r\n        let score = 0;\r\n        for (let i = 0; i < answers.length; i++){\r\n            let add_score = get_question_score(answers[i], correct_answer[i]);\r\n            score += add_score;\r\n        }\r\n        return score\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <ol>\r\n                    <li>Name is {name}</li>\r\n                    {get_scores(answers)}\r\n                </ol>\r\n                <p> The score is {get_total_score(answers)}</p>\r\n            </div>\r\n    \r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}